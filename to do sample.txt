import 'package:flutter/material.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'To-Do List',
      theme: ThemeData(
        primarySwatch: Colors.cyan,
        visualDensity: VisualDensity.adaptivePlatformDensity,
      ),
      home: const MyHomePage(title: 'To-Do List'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key, required this.title});

  final String title;

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final TextEditingController _controller = TextEditingController();
  final List<Map<String, dynamic>> _tasks = [];
  String _searchQuery = '';

  void _addTask() {
    if (_controller.text.isNotEmpty) {
      setState(() {
        _tasks.add({
          'task': _controller.text,
          'isCompleted': false,
          'priority': 'Low',
          'date': DateTime.now(),
          'dueDate': null, // No due date initially
        });
      });
      _controller.clear();
    }
  }

  void _toggleTaskCompletion(int index) {
    setState(() {
      _tasks[index]['isCompleted'] = !_tasks[index]['isCompleted'];
    });
  }

  void _removeTask(int index) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('Confirm Deletion'),
          content: const Text('Are you sure you want to delete this task?'),
          actions: <Widget>[
            TextButton(
              onPressed: () {
                setState(() {
                  _tasks.removeAt(index);
                });
                Navigator.of(context).pop();
              },
              child: const Text('Yes'),
            ),
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: const Text('No'),
            ),
          ],
        );
      },
    );
  }

  void _showPriorityDialog(int index) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('Set Task Priority'),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: ['Low', 'Medium', 'High'].map((priority) {
              return RadioListTile<String>(
                value: priority,
                groupValue: _tasks[index]['priority'],
                title: Text(priority),
                onChanged: (value) {
                  setState(() {
                    _tasks[index]['priority'] = value!;
                  });
                  Navigator.of(context).pop();
                },
              );
            }).toList(),
          ),
        );
      },
    );
  }

  void _showDueDateDialog(int index) {
    showDatePicker(
      context: context,
      initialDate: _tasks[index]['dueDate'] ?? DateTime.now(),
      firstDate: DateTime(2000),
      lastDate: DateTime(2100),
    ).then((date) {
      if (date != null) {
        setState(() {
          _tasks[index]['dueDate'] = date;
        });
      }
    });
  }

  void _markAllCompleted() {
    setState(() {
      for (var task in _tasks) {
        task['isCompleted'] = true;
      }
    });
  }

  void _searchTasks(String query) {
    setState(() {
      _searchQuery = query.toLowerCase();
    });
  }

  @override
  Widget build(BuildContext context) {
    List<Map<String, dynamic>> filteredTasks = _tasks.where((task) {
      return task['task'].toLowerCase().contains(_searchQuery) ||
          task['priority'].toLowerCase().contains(_searchQuery);
    }).toList();

    filteredTasks.sort((a, b) {
      // Sort by priority (Low < Medium < High) and due date
      var priorityOrder = {'Low': 1, 'Medium': 2, 'High': 3};
      if (a['priority'] != b['priority']) {
        return priorityOrder[a['priority']]! - priorityOrder[b['priority']]!;
      }
      return a['dueDate']?.compareTo(b['dueDate'] ?? DateTime.now()) ?? 0;
    });

    return Scaffold(
      appBar: AppBar(
        title: Text(widget.title),
        actions: [
          IconButton(
            icon: const Icon(Icons.refresh),
            onPressed: () {
              setState(() {
                _tasks.clear();
              });
            },
          ),
          IconButton(
            icon: const Icon(Icons.check_box_outlined),
            onPressed: _markAllCompleted,
          ),
        ],
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            TextField(
              controller: _controller,
              decoration: const InputDecoration(
                labelText: 'Enter a task',
                border: OutlineInputBorder(),
              ),
              onSubmitted: (_) => _addTask(),
            ),
            const SizedBox(height: 16),
            ElevatedButton(
              onPressed: _addTask,
              child: const Text('Add Task'),
            ),
            const SizedBox(height: 16),
            TextField(
              onChanged: _searchTasks,
              decoration: const InputDecoration(
                labelText: 'Search tasks',
                border: OutlineInputBorder(),
              ),
            ),
            const SizedBox(height: 16),
            Expanded(
              child: ListView.builder(
                itemCount: filteredTasks.length,
                itemBuilder: (context, index) {
                  return Card(
                    margin: const EdgeInsets.symmetric(vertical: 8),
                    child: ListTile(
                      leading: IconButton(
                        icon: Icon(
                          filteredTasks[index]['isCompleted']
                              ? Icons.check_box
                              : Icons.check_box_outline_blank,
                          color: Colors.green,
                        ),
                        onPressed: () => _toggleTaskCompletion(index),
                      ),
                      title: Text(
                        filteredTasks[index]['task'],
                        style: TextStyle(
                          decoration: filteredTasks[index]['isCompleted']
                              ? TextDecoration.lineThrough
                              : null,
                        ),
                      ),
                      subtitle: Text(
                        'Priority: ${filteredTasks[index]['priority']} | '
                            'Due: ${filteredTasks[index]['dueDate'] != null ? filteredTasks[index]['dueDate'].toLocal().toString().split(' ')[0] : 'No Due Date'}',
                        style: const TextStyle(fontSize: 12),
                      ),
                      trailing: IconButton(
                        icon: const Icon(Icons.delete, color: Colors.red),
                        onPressed: () => _removeTask(index),
                      ),
                      onTap: () {
                        _showPriorityDialog(index);
                        _showDueDateDialog(index);
                      },
                    ),
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }
}
